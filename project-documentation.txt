# DOCUMENTA√á√ÉO DO PROJETO - DUNE: AWAKENING PLAYER MATCHING
# ========================================================

## VIS√ÉO GERAL DO PROJETO
Este √© um aplicativo web desenvolvido para jogadores solo do jogo "Dune: Awakening" que n√£o fazem parte de guildas mas desejam formar grupos seguros e tempor√°rios para farmar no Deep Desert. A plataforma permite o encontro entre jogadores com perfis compat√≠veis atrav√©s de um sistema de an√∫ncios, matching inteligente e avalia√ß√£o entre jogadores.

## ORGANIZA√á√ÉO DO PROJETO (3 ESTEIRAS)

### üéØ ESTEIRA 1: Bolt Playground (desenvolvimento ativo)
- **Prop√≥sito**: Desenvolvimento iterativo, prototipagem r√°pida e valida√ß√µes
- **Caracter√≠sticas**: 
  - Recebe prompts e novas funcionalidades diretamente
  - N√£o atualiza reposit√≥rio Git automaticamente
  - Ambiente de experimenta√ß√£o e testes r√°pidos
- **Status**: Ativo (vers√£o principal de desenvolvimento)

### üéØ ESTEIRA 2: Reposit√≥rio Git Beta (testes com usu√°rios)
- **Prop√≥sito**: Vers√£o est√°vel para testes com usu√°rios e feedbacks
- **Caracter√≠sticas**:
  - C√≥digo limpo e documentado
  - Persist√™ncia em localStorage
  - Pronto para deploy (Vercel)
  - README completo com instru√ß√µes
- **Status**: Preparado para export e upload manual no GitHub
- **Arquivos adicionais**:
  - `README.md`: Documenta√ß√£o completa do projeto
  - `LICENSE`: Licen√ßa MIT
  - `.gitignore`: Configurado para Vite/Node.js
  - `deployment/`: Guias de build e deploy

### üéØ ESTEIRA 3: Vers√£o Produ√ß√£o (futuro)
- **Prop√≥sito**: Vers√£o final com banco de dados e autentica√ß√£o
- **Caracter√≠sticas**:
  - Integra√ß√£o com Supabase
  - Sistema de autentica√ß√£o real
  - Notifica√ß√µes em tempo real
  - Chat interno dos grupos
- **Status**: Planejado (n√£o implementado)

## TECNOLOGIAS UTILIZADAS
- React 18.3.1 com TypeScript
- Vite (bundler e dev server)
- Tailwind CSS (estiliza√ß√£o)
- Lucide React (√≠cones)
- ESLint (linting)
- LocalStorage (persist√™ncia tempor√°ria - Esteira 2)

## ESTRUTURA MODULAR DO PROJETO

### 1. TIPOS E INTERFACES

#### src/types/player.ts
Define as interfaces do sistema de cadastro de jogadores:
```typescript
interface PlayerData {
  nickname: string;           // Nome do jogador no jogo
  gameId: string;            // ID √∫nico no jogo (n√£o edit√°vel ap√≥s primeiro cadastro)
  email: string;             // E-mail do jogador
  age: string;               // Idade (13-100 anos)
  server: string;            // Servidor do jogo
  level: string;             // Level atual (1-60)
  weaponTier: string;        // Tier das armas (T1-T6)
  armorTier: string;         // Tier da armadura (T1-T6)
  ornithopterTier: string;   // Tier do ornic√≥ptero (T1-T6)
  miningToolsTier: string;   // Tier das ferramentas de min√©rio (T1-T6)
  spiceToolsTier: string;    // Tier das ferramentas de especiaria (T1-T6)
  interests: string[];       // Interesses (Coleta, PvP)
  hasDeepDesertBase: boolean; // Possui base no Deep Desert
  baseSector: string;        // Setor da base (A1-I9)
}

interface FormErrors {
  [key: string]: string;     // Mapeamento de erros por campo
}
```

#### src/types/group.ts
Define as interfaces do sistema de an√∫ncios de grupo:
```typescript
interface GroupRole {
  id: string;                // Identificador √∫nico do slot
  type: 'Coleta' | 'Ataque'; // Tipo da fun√ß√£o no grupo
  isOwner: boolean;          // Se √© o slot do criador do an√∫ncio
  playerName?: string;       // Nome do jogador (preenchido para o owner)
}

interface GroupAdData {
  groupName: string;         // Nome do grupo
  objective: 'Coleta' | 'PvP' | ''; // Objetivo principal
  roles: GroupRole[];        // Array com 4 slots de fun√ß√µes
  filters: {                 // Filtros para matching (todos opcionais)
    minLevel: string;
    interests: string[];
    minWeaponTier: string;
    minArmorTier: string;
    minOrnithopterTier: string;
    requiresDeepDesertBase: boolean;
    specificSector: string;
    requiredTools: string[];
  };
}

interface GroupAdErrors {
  [key: string]: string;     // Mapeamento de erros por campo
}
```

#### src/types/notification.ts
Define as interfaces do sistema de notifica√ß√µes e gerenciamento de grupos:
```typescript
interface Invitation {
  id: string;                // ID √∫nico do convite
  groupName: string;         // Nome do grupo
  groupObjective: 'Coleta' | 'PvP'; // Objetivo do grupo
  groupCreator: string;      // Nome do criador
  roles: GroupRole[];        // Fun√ß√µes do grupo
  playerEmail: string;       // E-mail do jogador convidado
  playerNickname: string;    // Nickname do jogador convidado
  createdAt: Date;          // Data de cria√ß√£o do convite
  status: 'pending' | 'accepted' | 'rejected'; // Status do convite
}

interface GroupMember {
  id: string;               // ID √∫nico do membro
  nickname: string;         // Nickname do jogador
  gameId: string;          // ID no jogo
  level: string;           // Level do jogador
  proposedRole: 'Coleta' | 'Ataque'; // Fun√ß√£o proposta
  status: 'interested' | 'selected' | 'rejected'; // Status no grupo
  joinedAt: Date;          // Data de interesse
}

interface ActiveGroup {
  id: string;              // ID √∫nico do grupo
  groupName: string;       // Nome do grupo
  objective: 'Coleta' | 'PvP'; // Objetivo
  creator: string;         // Criador do grupo
  roles: GroupRole[];      // Fun√ß√µes com status de preenchimento
  members: GroupMember[];  // Membros interessados/selecionados
  waitingList: GroupMember[]; // Lista de espera
  createdAt: Date;        // Data de cria√ß√£o
  isActive: boolean;      // Se o grupo est√° ativo
}
```

#### src/types/ratings.ts
Define as interfaces do sistema de avalia√ß√£o entre jogadores:
```typescript
interface PlayerRating {
  fromNickname: string;    // Quem avaliou
  toNickname: string;      // Quem foi avaliado
  groupId: string;         // ID do grupo onde jogaram juntos
  stars: number;           // Avalia√ß√£o de 1 a 5 estrelas
  comment?: string;        // Coment√°rio opcional (m√°x 200 chars)
  createdAt: Date;        // Data da avalia√ß√£o
}

interface RatingFormData {
  [playerNickname: string]: {
    stars: number;
    comment: string;
    submitted: boolean;
  };
}

interface PlayerProfileData {
  nickname: string;        // Nome do jogador
  gameId: string;         // ID no jogo
  averageRating: number;  // M√©dia das avalia√ß√µes
  totalRatings: number;   // Total de avalia√ß√µes recebidas
  recentComments: Array<{ // √öltimos 5 coment√°rios
    comment: string;
    stars: number;
    fromNickname: string;
    createdAt: Date;
  }>;
}

interface CompletedGroup {
  id: string;             // ID do grupo encerrado
  groupName: string;      // Nome do grupo
  objective: 'Coleta' | 'PvP'; // Objetivo
  completedAt: Date;      // Data de encerramento
  members: Array<{        // Membros que participaram
    nickname: string;
    gameId: string;
    role: 'Coleta' | 'Ataque';
  }>;
  canRate: boolean;       // Se ainda est√° no prazo de 30 min
  currentPlayerNickname: string; // Para evitar autoavalia√ß√£o
}
```

### 2. CONSTANTES

#### src/constants/gameData.ts
Centraliza dados est√°ticos do jogo (compartilhados):
- `SERVERS`: Lista de servidores dispon√≠veis
- `EQUIPMENT_TIERS`: Tiers de equipamentos (T1-T6)
- `TOOL_TIERS`: Tiers de ferramentas (T1-T6)
- `INTEREST_OPTIONS`: Op√ß√µes de interesse (Coleta, PvP)
- `SECTORS`: Setores do mapa (A1-I9) gerados dinamicamente

#### src/constants/groupData.ts
Constantes espec√≠ficas do sistema de grupos:
- `GROUP_OBJECTIVES`: Objetivos do grupo (Coleta, PvP)
- `ROLE_TYPES`: Tipos de fun√ß√£o (Coleta, Ataque)
- `FILTER_INTERESTS`: Interesses para filtros
- `REQUIRED_TOOLS`: Ferramentas que podem ser exigidas
- `MIN_LEVEL_OPTIONS`: Op√ß√µes de level m√≠nimo (1-60)
- `FILTER_EQUIPMENT_TIERS`: Tiers simplificados para filtros (T1-T6)

### 3. ALGORITMO DE MATCHING

#### src/utils/matching.ts
Sistema inteligente de matching entre jogadores e an√∫ncios:

**Fun√ß√£o principal: `matchPlayersToAd(groupAd, allPlayers)`**
- Recebe um an√∫ncio de grupo e lista de jogadores
- Retorna array de jogadores compat√≠veis
- Aplica todos os filtros definidos no an√∫ncio

**Regras de compatibilidade implementadas:**
1. **Level m√≠nimo**: Jogador deve ter level >= ao exigido
2. **Interesses**: Jogador deve ter pelo menos um interesse em comum
3. **Equipamentos**: Tiers de armas, armadura e ornic√≥ptero >= ao m√≠nimo
4. **Base no Deep Desert**: Se exigida, jogador deve possuir
5. **Setor espec√≠fico**: Se definido, deve coincidir com o do jogador
6. **Ferramentas**: Jogador deve possuir as ferramentas exigidas

**Fun√ß√£o auxiliar: `generateInvitations(groupAd, compatiblePlayers)`**
- Gera convites autom√°ticos para jogadores compat√≠veis
- Cria estrutura de dados para sistema de notifica√ß√µes
- Inclui todas as informa√ß√µes necess√°rias para decis√£o do jogador

### 4. HOOKS PERSONALIZADOS

#### src/hooks/usePlayerForm.ts
Hook centralizado que gerencia todo o estado e l√≥gica do formul√°rio de cadastro:

**Estados gerenciados:**
- `formData`: Dados do formul√°rio de jogador
- `gameIdLocked`: Controle de edi√ß√£o do gameId
- `errors`: Mensagens de erro de valida√ß√£o

**Fun√ß√µes expostas:**
- `handleInputChange(field, value)`: Atualiza campos do formul√°rio
- `handleInterestToggle(interest)`: Gerencia sele√ß√£o m√∫ltipla de interesses
- `handleSubmit(e)`: Processa submiss√£o do formul√°rio

#### src/hooks/useGroupAdForm.ts
Hook centralizado que gerencia todo o estado e l√≥gica do formul√°rio de an√∫ncio:

**Estados gerenciados:**
- `formData`: Dados do an√∫ncio de grupo
- `errors`: Mensagens de erro de valida√ß√£o

**Fun√ß√µes expostas:**
- `handleInputChange(field, value)`: Atualiza campos do formul√°rio
- `handleRoleChange(roleId, newType)`: Altera tipo de fun√ß√£o de um slot
- `handleFilterInterestToggle(interest)`: Gerencia filtros de interesse
- `handleFilterToolToggle(tool)`: Gerencia filtros de ferramentas
- `handleSubmit(e)`: Processa submiss√£o do an√∫ncio

**Valida√ß√µes implementadas:**
- Nome do grupo obrigat√≥rio
- Objetivo obrigat√≥rio
- Pelo menos uma fun√ß√£o definida
- Valida√ß√£o condicional de setor quando base √© exigida
- Valida√ß√£o de faixa de level (1-60)

### 5. COMPONENTES MODULARES

#### SISTEMA DE CADASTRO DE JOGADOR (src/components/player/)

##### PlayerForm.tsx
**Componente principal** que orquestra todo o formul√°rio de cadastro

##### BasicInfoSection.tsx
**Se√ß√£o de informa√ß√µes b√°sicas:**
- Nickname, ID do jogo, e-mail, idade
- √çcones contextuais (User, Mail, Calendar, CheckCircle)

##### GameInfoSection.tsx
**Se√ß√£o de informa√ß√µes do jogo:**
- Servidor e level atual
- √çcones contextuais (Server, Trophy)

##### EquipmentSection.tsx
**Se√ß√£o de equipamentos:**
- Tiers de armas, armadura e ornic√≥ptero
- Layout em grid responsivo

##### ToolsSection.tsx
**Se√ß√£o de ferramentas de coleta:**
- Ferramentas de min√©rio e especiaria
- Layout em grid responsivo

##### InterestsSection.tsx
**Se√ß√£o de interesses:**
- Sele√ß√£o m√∫ltipla: Coleta, PvP

##### DesertBaseSection.tsx
**Se√ß√£o de base no Deep Desert:**
- Checkbox condicional + dropdown de setor

##### FormSubmitButton.tsx
**Bot√£o de submiss√£o do cadastro**

##### FieldError.tsx
**Componente de erro reutiliz√°vel**

##### PlayerProfile.tsx
**Tela de perfil p√∫blico do jogador:**
- Exibe nickname, ID e avatar personalizado
- Estat√≠sticas de reputa√ß√£o (m√©dia, total de avalia√ß√µes, % positivas)
- Lista dos √∫ltimos 5 coment√°rios recebidos
- Renderiza√ß√£o de estrelas (inteiras e meias)
- Estado vazio quando n√£o h√° avalia√ß√µes
- Design responsivo com cards informativos

#### SISTEMA DE AN√öNCIOS DE GRUPO (src/components/group/)

##### GroupAdForm.tsx
**Componente principal** que orquestra todo o formul√°rio de an√∫ncio:
- Importa e utiliza o hook useGroupAdForm
- Renderiza header com t√≠tulo e descri√ß√£o
- Organiza as se√ß√µes em ordem l√≥gica
- Mant√©m layout responsivo e tema visual

##### GroupBasicInfoSection.tsx
**Se√ß√£o de informa√ß√µes b√°sicas do grupo:**
- Nome do grupo (obrigat√≥rio)
- Objetivo do grupo (dropdown: Coleta/PvP, obrigat√≥rio)
- √çcones contextuais (Users, Target)

##### GroupRolesSection.tsx
**Se√ß√£o de fun√ß√µes no grupo:**
- 4 slots fixos para membros do grupo
- Slot 1 sempre √© o anunciante (marcado com coroa)
- Cada slot tem dropdown para fun√ß√£o: Coleta/Ataque
- Fun√ß√£o do anunciante pode ser alterada
- √çcones contextuais (Shield, Crown)
- Dica explicativa sobre o sistema

##### GroupFiltersSection.tsx
**Se√ß√£o de filtros para matching (todos opcionais):**
- Level m√≠nimo (dropdown 1-60)
- Interesses do jogador (checkboxes: Coleta/PvP)
- Equipamentos m√≠nimos (3 dropdowns: armas, armadura, ornic√≥ptero)
- Base no Deep Desert (checkbox + dropdown condicional de setor)
- Ferramentas necess√°rias (checkboxes: min√©rio/especiaria)
- √çcones contextuais (Filter, Home)
- Dica sobre matching inteligente

##### GroupSubmitButton.tsx
**Bot√£o de submiss√£o do an√∫ncio:**
- Estilizado com gradiente √¢mbar/laranja
- √çcone de envio (Send)
- Efeitos hover e focus
- Texto "Publicar An√∫ncio"

##### MyGroup.tsx
**Tela de gerenciamento do grupo ativo:**
- Visualiza√ß√£o das informa√ß√µes do grupo criado
- Status dos slots (preenchidos/vazios)
- Lista de jogadores interessados com a√ß√µes (selecionar/rejeitar)
- Lista de jogadores j√° selecionados
- Estat√≠sticas do grupo (slots preenchidos, interessados, vagas)
- Bot√£o para encerrar an√∫ncio com confirma√ß√£o
- Interface responsiva com cards organizados

#### SISTEMA DE NOTIFICA√á√ïES (src/components/notifications/)

##### NotificationList.tsx
**Tela principal de notifica√ß√µes:**
- Lista todos os convites pendentes do jogador
- Filtragem autom√°tica por status (pending)
- Estado vazio quando n√£o h√° convites
- Dicas para melhorar o matching
- Layout responsivo com cards de convite

##### NotificationCard.tsx
**Card individual de convite:**
- Informa√ß√µes completas do grupo (nome, objetivo, criador)
- Visualiza√ß√£o das fun√ß√µes do grupo
- Data e hora do convite formatadas
- Bot√µes de a√ß√£o (aceitar/rejeitar)
- Feedback visual por tipo de objetivo
- √çcones contextuais e cores tem√°ticas

#### SISTEMA DE AVALIA√á√ïES (src/components/ratings/)

##### RatePlayers.tsx
**Tela de avalia√ß√£o p√≥s-grupo:**
- **Controle de tempo**: Countdown de 30 minutos ap√≥s encerramento
- **Preven√ß√£o de autoavalia√ß√£o**: Jogador n√£o pode se avaliar
- **Interface de avalia√ß√£o**:
  - Seletor de estrelas interativo (1-5)
  - Campo de coment√°rio opcional (m√°x 200 chars)
  - Contador de caracteres em tempo real
- **Estados visuais**:
  - Cards diferenciados para avalia√ß√µes enviadas
  - Feedback de sucesso ap√≥s envio
  - Desabilita√ß√£o ap√≥s submiss√£o
- **Valida√ß√µes**:
  - Estrelas obrigat√≥rias
  - Limite de caracteres no coment√°rio
  - Preven√ß√£o de envio duplicado
- **Persist√™ncia**: Salva avalia√ß√µes no localStorage
- **Expira√ß√£o**: Tela bloqueada ap√≥s 30 minutos

### 6. COMPONENTE PRINCIPAL (src/App.tsx)
Sistema de navega√ß√£o completo com 6 telas:
- **Cadastro**: Formul√°rio de perfil do jogador
- **Criar An√∫ncio**: Cria√ß√£o de an√∫ncios de grupo
- **Notifica√ß√µes**: Convites recebidos
- **Meu Grupo**: Gerenciamento do grupo ativo
- **Avaliar Jogadores**: Sistema de avalia√ß√£o p√≥s-grupo
- **Perfil**: Visualiza√ß√£o da reputa√ß√£o p√∫blica
- Navega√ß√£o por abas com estado preservado
- Design responsivo e consistente
- **Coment√°rios internos**: Documenta√ß√£o do fluxo completo

## ARQUITETURA E PADR√ïES

### SEPARA√á√ÉO DE RESPONSABILIDADES
- **Tipos**: Defini√ß√µes TypeScript centralizadas por funcionalidade
- **Constantes**: Dados est√°ticos organizados (compartilhados e espec√≠ficos)
- **Hooks**: L√≥gica de estado e valida√ß√£o separada por funcionalidade
- **Componentes**: UI modular e reutiliz√°vel
- **Utils**: Algoritmos e fun√ß√µes auxiliares (matching)

### PROPS E TIPAGEM
Todos os componentes recebem props tipadas:
- Dados do formul√°rio espec√≠ficos
- Fun√ß√µes de callback apropriadas
- Estados de erro
- Flags de controle

### REUTILIZA√á√ÉO
- `FieldError`: Usado em ambos os sistemas
- Constantes compartilhadas entre sistemas
- Padr√µes de design consistentes
- Hooks especializados por funcionalidade
- Algoritmo de matching reutiliz√°vel
- Sistema de renderiza√ß√£o de estrelas

### RESPONSIVIDADE
- Grid adaptativo (1 coluna mobile, 2-3 colunas desktop)
- Espa√ßamento consistente com Tailwind
- Layout mobile-friendly em todos os sistemas
- Navega√ß√£o responsiva com wrap autom√°tico

## FUNCIONALIDADES IMPLEMENTADAS

### SISTEMA DE CADASTRO DE JOGADOR
- Valida√ß√£o robusta em tempo real
- Game ID lock ap√≥s primeira valida√ß√£o
- Experi√™ncia do usu√°rio otimizada
- Tema visual Dune consistente

### SISTEMA DE AN√öNCIOS DE GRUPO
- **Cria√ß√£o de grupos**: Nome + objetivo obrigat√≥rios
- **Gest√£o de fun√ß√µes**: 4 slots com tipos Coleta/Ataque
- **Sistema de filtros avan√ßado**: 
  - Level m√≠nimo
  - Interesses espec√≠ficos
  - Equipamentos m√≠nimos por tier
  - Exig√™ncia de base no Deep Desert
  - Ferramentas necess√°rias
- **Valida√ß√£o inteligente**: Campos condicionais e valida√ß√£o contextual
- **Matching preparation**: Estrutura pronta para algoritmo de matching

### SISTEMA DE MATCHING INTELIGENTE
- **Algoritmo robusto**: Compara jogadores com filtros de an√∫ncios
- **M√∫ltiplos crit√©rios**: Level, equipamentos, interesses, localiza√ß√£o, ferramentas
- **Gera√ß√£o autom√°tica de convites**: Para jogadores compat√≠veis
- **Flexibilidade**: Filtros opcionais permitem matching mais amplo
- **Valida√ß√£o de tiers**: Extra√ß√£o e compara√ß√£o num√©rica de equipamentos

### SISTEMA DE NOTIFICA√á√ïES
- **Lista de convites**: Visualiza√ß√£o de todos os convites pendentes
- **Informa√ß√µes completas**: Detalhes do grupo e fun√ß√µes
- **A√ß√µes diretas**: Aceitar/rejeitar convites
- **Feedback visual**: Status e timestamps formatados
- **Estado vazio**: Interface amig√°vel quando n√£o h√° convites

### SISTEMA DE GERENCIAMENTO DE GRUPO
- **Vis√£o geral**: Status completo do grupo ativo
- **Gest√£o de membros**: Sele√ß√£o e rejei√ß√£o de interessados
- **Controle de vagas**: Limite de 4 membros respeitado
- **Encerramento**: Op√ß√£o de fechar an√∫ncio com confirma√ß√£o
- **Estat√≠sticas**: M√©tricas visuais do grupo

### SISTEMA DE AVALIA√á√ïES ENTRE JOGADORES
- **Avalia√ß√£o p√≥s-grupo**: Ativado ap√≥s encerramento do grupo
- **Janela de tempo**: 30 minutos para avaliar ap√≥s encerramento
- **Preven√ß√£o de autoavalia√ß√£o**: Jogadores n√£o podem se avaliar
- **Avalia√ß√£o completa**:
  - Nota de 1 a 5 estrelas (obrigat√≥ria)
  - Coment√°rio opcional (m√°ximo 200 caracteres)
- **Interface intuitiva**:
  - Seletor de estrelas interativo
  - Contador de caracteres em tempo real
  - Feedback visual de envio
- **Persist√™ncia local**: Salva no localStorage temporariamente
- **Estados visuais**: Cards diferenciados para avalia√ß√µes enviadas

### SISTEMA DE PERFIL E REPUTA√á√ÉO
- **Perfil p√∫blico**: Visualiza√ß√£o da reputa√ß√£o do jogador
- **Estat√≠sticas completas**:
  - M√©dia de avalia√ß√µes (com decimais)
  - Total de avalia√ß√µes recebidas
  - Percentual de avalia√ß√µes positivas (4+ estrelas)
- **Coment√°rios recentes**: √öltimos 5 coment√°rios com detalhes
- **Renderiza√ß√£o de estrelas**: Suporte a estrelas inteiras e meias
- **Design responsivo**: Cards informativos e layout adaptativo

## REGRAS DE NEG√ìCIO IMPLEMENTADAS

### CADASTRO DE JOGADOR
- ID do jogo √∫nico e n√£o edit√°vel (previne cadastros duplicados)
- Equipamentos e ferramentas usam sistema de tiers T1-T6
- Base no Deep Desert opcional mas setor obrigat√≥rio se possui base
- Interesses m√∫ltiplos permitidos mas pelo menos um obrigat√≥rio
- Faixas de idade (13-100) e level (1-60) adequadas ao p√∫blico

### AN√öNCIOS DE GRUPO
- M√°ximo 4 membros por grupo (incluindo anunciante)
- Anunciante sempre ocupa primeiro slot
- Fun√ß√µes flex√≠veis: 100% coleta, 100% ataque ou misto
- Filtros opcionais para matching personalizado
- Nome e objetivo obrigat√≥rios para publica√ß√£o
- Valida√ß√£o condicional de setor quando base √© exigida

### MATCHING E CONVITES
- Compatibilidade baseada em m√∫ltiplos crit√©rios
- Filtros opcionais aumentam flexibilidade
- Convites autom√°ticos para jogadores compat√≠veis
- Preserva√ß√£o de dados do grupo e jogador no convite
- Status tracking para convites (pending/accepted/rejected)

### GERENCIAMENTO DE GRUPO
- Apenas criador pode gerenciar o grupo
- Sele√ß√£o manual de membros dentre os interessados
- Limite r√≠gido de 4 membros total
- Encerramento requer confirma√ß√£o
- Estados claros para cada membro (interessado/selecionado/rejeitado)

### AVALIA√á√ïES ENTRE JOGADORES
- **Elegibilidade**: Apenas membros que participaram do grupo (status "selected")
- **Janela de tempo**: 30 minutos ap√≥s encerramento do grupo
- **Preven√ß√£o de autoavalia√ß√£o**: Jogador n√£o pode se avaliar
- **Avalia√ß√£o obrigat√≥ria**: Estrelas de 1 a 5 s√£o obrigat√≥rias
- **Coment√°rio opcional**: M√°ximo 200 caracteres
- **Envio √∫nico**: Cada jogador pode avaliar outro apenas uma vez por grupo
- **Persist√™ncia**: Avalia√ß√µes salvas localmente (preparado para BD)

### PERFIL E REPUTA√á√ÉO
- **C√°lculo de m√©dia**: Baseado em todas as avalia√ß√µes recebidas
- **Coment√°rios p√∫blicos**: √öltimos 5 coment√°rios vis√≠veis
- **Estat√≠sticas transparentes**: Total de avalia√ß√µes e percentual positivo
- **Ordena√ß√£o cronol√≥gica**: Coment√°rios mais recentes primeiro
- **Anonimato opcional**: Sistema preparado para coment√°rios an√¥nimos

## ARQUIVOS DE DEPLOY E DOCUMENTA√á√ÉO

### README.md
- Documenta√ß√£o completa do projeto
- Instru√ß√µes de instala√ß√£o e execu√ß√£o
- Descri√ß√£o das tecnologias utilizadas
- Guia de uso das funcionalidades
- Informa√ß√µes sobre licen√ßa e contribui√ß√£o

### LICENSE
- Licen√ßa MIT para uso livre
- Permite uso comercial e modifica√ß√£o
- Mant√©m cr√©ditos do projeto original

### .gitignore
- Configurado para projetos Vite/Node.js
- Exclui node_modules, builds e arquivos tempor√°rios
- Inclui exclus√£o da pasta .bolt/ (espec√≠fica do Bolt)

### deployment/vercel.json
- Configura√ß√£o para deploy no Vercel
- Roteamento SPA configurado
- Build command e output directory definidos

### deployment/build-and-deploy.md
- Guia completo de build e deploy
- Instru√ß√µes para Vercel CLI e GitHub integration
- Troubleshooting de problemas comuns
- Configura√ß√µes de performance e monitoramento

## PR√ìXIMAS ETAPAS PLANEJADAS

### ‚úÖ CONCLU√çDO (Esteira 2 - Beta)
1. ‚úÖ Sistema de cria√ß√£o de an√∫ncios
2. ‚úÖ Algoritmo de matching entre jogadores e an√∫ncios
3. ‚úÖ Sistema de convites autom√°ticos
4. ‚úÖ Tela de notifica√ß√µes para jogadores
5. ‚úÖ Tela de gerenciamento de grupo
6. ‚úÖ Sistema de avalia√ß√µes entre jogadores
7. ‚úÖ Perfil p√∫blico com reputa√ß√£o
8. ‚úÖ Documenta√ß√£o completa
9. ‚úÖ Estrutura para deploy

### üîÑ PR√ìXIMAS VERS√ïES (Esteira 3 - Produ√ß√£o)
1. Integra√ß√£o com banco de dados (Supabase)
2. Sistema de autentica√ß√£o
3. Dashboard de an√∫ncios ativos p√∫blicos
4. Sistema de notifica√ß√µes em tempo real
5. Chat interno do grupo
6. Hist√≥rico de grupos participados
7. Sistema de den√∫ncias e modera√ß√£o
8. Filtros avan√ßados de reputa√ß√£o no matching
9. Badges e conquistas para jogadores
10. Analytics e m√©tricas de uso

## BENEF√çCIOS DA MODULARIZA√á√ÉO
- **Manutenibilidade**: Cada componente tem responsabilidade √∫nica
- **Testabilidade**: Componentes isolados s√£o mais f√°ceis de testar
- **Reutiliza√ß√£o**: Componentes podem ser reutilizados em outras partes
- **Escalabilidade**: F√°cil adicionar novas se√ß√µes ou modificar existentes
- **Colabora√ß√£o**: Diferentes desenvolvedores podem trabalhar em componentes separados
- **Consist√™ncia**: Padr√µes de design e c√≥digo mantidos entre funcionalidades
- **Performance**: Carregamento otimizado de componentes espec√≠ficos

## ESTRUTURA DE ARQUIVOS ATUAL
```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ player/          # Sistema de cadastro de jogador
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PlayerForm.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BasicInfoSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameInfoSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EquipmentSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ToolsSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InterestsSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DesertBaseSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FormSubmitButton.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FieldError.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PlayerProfile.tsx
‚îÇ   ‚îú‚îÄ‚îÄ group/           # Sistema de an√∫ncios e gerenciamento
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GroupAdForm.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GroupBasicInfoSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GroupRolesSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GroupFiltersSection.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GroupSubmitButton.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MyGroup.tsx
‚îÇ   ‚îú‚îÄ‚îÄ notifications/   # Sistema de notifica√ß√µes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationList.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationCard.tsx
‚îÇ   ‚îî‚îÄ‚îÄ ratings/         # Sistema de avalia√ß√µes
‚îÇ       ‚îî‚îÄ‚îÄ RatePlayers.tsx
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ usePlayerForm.ts # Hook do sistema de cadastro
‚îÇ   ‚îî‚îÄ‚îÄ useGroupAdForm.ts # Hook do sistema de an√∫ncios
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îú‚îÄ‚îÄ player.ts        # Tipos do sistema de cadastro
‚îÇ   ‚îú‚îÄ‚îÄ group.ts         # Tipos do sistema de an√∫ncios
‚îÇ   ‚îú‚îÄ‚îÄ notification.ts  # Tipos do sistema de notifica√ß√µes
‚îÇ   ‚îî‚îÄ‚îÄ ratings.ts       # Tipos do sistema de avalia√ß√µes
‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îú‚îÄ‚îÄ gameData.ts      # Constantes compartilhadas
‚îÇ   ‚îî‚îÄ‚îÄ groupData.ts     # Constantes espec√≠ficas de grupos
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ matching.ts      # Algoritmo de matching
‚îú‚îÄ‚îÄ App.tsx              # Componente principal com navega√ß√£o
‚îî‚îÄ‚îÄ main.tsx             # Entry point

deployment/              # Arquivos de deploy
‚îú‚îÄ‚îÄ vercel.json         # Configura√ß√£o Vercel
‚îî‚îÄ‚îÄ build-and-deploy.md # Guia de deploy

README.md               # Documenta√ß√£o principal
LICENSE                 # Licen√ßa MIT
.gitignore             # Exclus√µes Git
project-documentation.txt # Esta documenta√ß√£o
```

## DESIGN SYSTEM ESTABELECIDO
- **Paleta de cores**: Tons √¢mbar/laranja inspirados em Dune
- **Gradientes**: Suaves e consistentes entre funcionalidades
- **Tipografia**: Hier√°rquica com pesos adequados
- **Espa√ßamento**: Sistema baseado em Tailwind (m√∫ltiplos de 4px)
- **√çcones**: Lucide React com contexto sem√¢ntico
- **Intera√ß√µes**: Hover states, focus rings, transi√ß√µes suaves
- **Layout**: Mobile-first, responsivo, grid adaptativo
- **Estados**: Feedback visual claro para a√ß√µes e status
- **Modais**: Confirma√ß√µes importantes com overlay
- **Cards**: Estrutura consistente para informa√ß√µes agrupadas
- **Estrelas**: Sistema unificado para avalia√ß√µes (inteiras e meias)
- **Avatars**: C√≠rculos coloridos com iniciais para identifica√ß√£o

## FLUXO COMPLETO DA APLICA√á√ÉO

### 1. CADASTRO DO JOGADOR
- Jogador preenche perfil completo
- Valida√ß√£o em tempo real
- Game ID trava ap√≥s primeira submiss√£o
- Dados ficam dispon√≠veis para matching

### 2. CRIA√á√ÉO DE AN√öNCIO
- Jogador define grupo (nome, objetivo, fun√ß√µes)
- Configura filtros opcionais para matching
- Sistema valida dados obrigat√≥rios
- An√∫ncio fica ativo para matching

### 3. MATCHING AUTOM√ÅTICO
- Sistema compara jogadores cadastrados com an√∫ncios ativos
- Aplica todos os filtros definidos
- Gera convites para jogadores compat√≠veis
- Convites aparecem na tela de notifica√ß√µes

### 4. GEST√ÉO DE CONVITES
- Jogadores visualizam convites recebidos
- Podem aceitar ou rejeitar convites
- Informa√ß√µes completas do grupo dispon√≠veis
- Feedback imediato das a√ß√µes

### 5. FORMA√á√ÉO DO GRUPO
- Criador visualiza jogadores interessados
- Seleciona membros at√© completar 4 slots
- Pode rejeitar jogadores n√£o desejados
- Encerra an√∫ncio quando satisfeito

### 6. FARMING NO DEEP DESERT
- Grupo formado vai farmar juntos
- Experi√™ncia de jogo colaborativa
- Criador encerra grupo ap√≥s sess√£o

### 7. AVALIA√á√ÉO ENTRE JOGADORES
- Sistema ativa tela de avalia√ß√£o (30 min)
- Cada membro avalia os outros (exceto a si mesmo)
- Avalia√ß√£o: 1-5 estrelas + coment√°rio opcional
- Dados salvos para construir reputa√ß√£o

### 8. CONSTRU√á√ÉO DE REPUTA√á√ÉO
- Avalia√ß√µes acumulam no perfil do jogador
- M√©dia, total e coment√°rios ficam p√∫blicos
- Reputa√ß√£o influencia convites futuros
- Ciclo se repete com maior confiabilidade

Este fluxo completo simula todo o ecossistema de forma√ß√£o de grupos tempor√°rios para farming no Deep Desert, desde o cadastro inicial at√© a constru√ß√£o de reputa√ß√£o a longo prazo, criando uma comunidade auto-regulada e confi√°vel.

---

**VERS√ÉO ATUAL**: Beta v1.0 (Janeiro 2025)  
**STATUS**: Pronto para export e deploy  
**PR√ìXIMO PASSO**: Upload manual no GitHub e deploy no Vercel